using UnityEngine.Networking; using UnityEngine; using System.Collections;  public class Player : NetworkBehaviour {      [SyncVar]     private bool _isDead = false;      public bool isDead     {         get { return _isDead; }         protected set { _isDead = value; }     }      [SerializeField]     private int maxHealth = 100;      [SyncVar]     private int currentHealth;      [SerializeField]     private Behaviour[] disableOnDeath;     private bool[] wasEnabled;      //void Update()     //{     //    if(!isLocalPlayer)     //    {     //        return;     //    }      //    if(Input.GetKeyDown(KeyCode.K))     //    {     //        RpcTakeDamage(maxHealth);     //    }     //}   	public void Setup ()     {         wasEnabled = new bool[disableOnDeath.Length];         for (int i = 0; i < wasEnabled.Length; i++)         {             wasEnabled[i] = disableOnDeath[i].enabled;         }          SetDefaults();  	}      public void SetDefaults()     {         isDead = false;         currentHealth = maxHealth;          for (int i = 0; i < disableOnDeath.Length; i++)         {             disableOnDeath[i].enabled = wasEnabled[i];         }          SetCollider(true);              }      private void SetCollider(bool _enabled)     {         Collider _col = GetComponent<Collider>();         if (_col != null)         {             _col.enabled = _enabled;         }     }         [ClientRpc]     public void RpcTakeDamage(int _damage)     {         if(isDead)         {             return;         }          currentHealth -= _damage;          Debug.Log(this.name + " now has " + currentHealth + " health");          if(currentHealth <= 0)         {             Die();         }     }      private void Die()     {         isDead = true;          for (int i = 0; i < disableOnDeath.Length; i++)         {             disableOnDeath[i].enabled = false;         }          SetCollider(false);          Debug.Log(this.name + " is dead");          StartCoroutine(Respawn());     }      private IEnumerator Respawn()     {         yield return new WaitForSeconds(GameManager.instance.matchSettings.respawnTime);         SetDefaults();          Transform _spawnPoint = NetworkManager.singleton.GetStartPosition();          this.transform.position = _spawnPoint.position;         this.transform.rotation = _spawnPoint.rotation;          Debug.Log(this.name + " respawned");     }  } 